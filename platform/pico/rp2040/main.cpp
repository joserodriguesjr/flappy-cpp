// #include <stdio.h>
// #include <math.h>

// #include "hardware/pio.h"
// #include "hardware/gpio.h"
// #include "hardware/interp.h"

#include "pico/stdio.h"
#include "pico/stdlib.h"
#include "pico/time.h"
#include "st7789.hpp"
#include <cstdint>
#include <cstdlib>
#include <stdlib.h>

#define LCD_WIDTH 240
#define LCD_HEIGHT 320

#define LEFT_BUTTON 6
#define RIGHT_BUTTON 7

#define BLACK 0x00
#define WHITE 0xFF

#define FLAPPY_HEIGHT 19
#define FLAPPY_WIDTH 25
#define NUM_SPRITES 3
#define SPRITE_OFFSET (FLAPPY_HEIGHT * FLAPPY_WIDTH)

// array size is 950
const uint16_t flappy1[] = {
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8,
    0x51c8, 0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x51c8, 0x51c8, 0xfb84, 0xfb84, 0xfb84, 0xfb84, 0x51c8, 0xffdf, 0xffdf,
    0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0x51c8, 0xfb84, 0xfb84,
    0xf9c3, 0xf9c3, 0x51c8, 0x51c8, 0xffdf, 0xffdf, 0xffdf, 0xffdf, 0x51c8,
    0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0xf9c3, 0xf9c3, 0xf9c3,
    0x51c8, 0x51c8, 0xd739, 0xffdf, 0xffdf, 0x51c8, 0xffdf, 0xffdf, 0x51c8,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x51c8,
    0x51c8, 0x51c8, 0x51c8, 0x51c8, 0xf9c3, 0xf9c3, 0xf9c3, 0x51c8, 0x51c8,
    0xd739, 0xffdf, 0xffdf, 0x51c8, 0xffdf, 0xffdf, 0x51c8, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0xffdf, 0xffdf, 0xffdf,
    0xffdf, 0xffdf, 0x51c8, 0xf9c3, 0xf9c3, 0x51c8, 0x51c8, 0xd739, 0xffdf,
    0xffdf, 0x51c8, 0xffdf, 0xffdf, 0x51c8, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x51c8, 0xffdf, 0xffdf, 0xffdf, 0xffdf, 0xffdf,
    0xffdf, 0x51c8, 0xf9c3, 0xf9c3, 0xf9c3, 0x51c8, 0xd739, 0xffdf, 0xffdf,
    0xffdf, 0xffdf, 0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x51c8, 0xfeb2, 0xffdf, 0xffdf, 0xffdf, 0xffdf, 0xfeb2, 0x51c8,
    0xf9c3, 0xf9c3, 0xf9c3, 0xf9c3, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8,
    0x51c8, 0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x51c8, 0xfeb2, 0xfeb2, 0xfeb2, 0xfeb2, 0x51c8, 0xf9c3, 0xf9c3, 0xf9c3,
    0xf9c3, 0x51c8, 0xf5a8, 0xf5a8, 0xf5a8, 0xf5a8, 0xf5a8, 0xf5a8, 0xf5a8,
    0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x51c8,
    0x51c8, 0x51c8, 0x51c8, 0xd182, 0xd182, 0xd182, 0x51c8, 0x51c8, 0xf5a8,
    0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0x51c8, 0x51c8,
    0x51c8, 0xd182, 0xd182, 0xd182, 0x51c8, 0x51c8, 0xf5a8, 0x51c8, 0x51c8,
    0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0xd182, 0xd182, 0xd182, 0xd182,
    0xd182, 0xd182, 0xd182, 0xd182, 0x51c8, 0xf5a8, 0xf5a8, 0xf5a8, 0xf5a8,
    0xf5a8, 0xf5a8, 0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x51c8, 0x51c8, 0x51c8, 0xd182, 0xd182, 0xd182,
    0xd182, 0xd182, 0xd182, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8,
    0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};

// array size is 950
const uint16_t flappy2[] = {
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8,
    0x51c8, 0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x51c8, 0x51c8, 0xfb84, 0xfb84, 0xfb84, 0xfb84, 0x51c8, 0xffdf, 0xffdf,
    0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0x51c8, 0xfb84, 0xfb84,
    0xf9c3, 0xf9c3, 0x51c8, 0x51c8, 0xffdf, 0xffdf, 0xffdf, 0xffdf, 0x51c8,
    0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x51c8, 0xfb84, 0xfb84, 0xf9c3, 0xf9c3, 0xf9c3, 0xf9c3,
    0x51c8, 0x51c8, 0xd739, 0xffdf, 0xffdf, 0x51c8, 0xffdf, 0xffdf, 0x51c8,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x51c8, 0xfb84, 0xfb84, 0xf9c3, 0xf9c3, 0xf9c3, 0xf9c3, 0x51c8, 0x51c8,
    0xd739, 0xffdf, 0xffdf, 0x51c8, 0xffdf, 0xffdf, 0x51c8, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0xf9c3, 0xf9c3,
    0xf9c3, 0xf9c3, 0xf9c3, 0xf9c3, 0xf9c3, 0x51c8, 0x51c8, 0xd739, 0xffdf,
    0xffdf, 0x51c8, 0xffdf, 0xffdf, 0x51c8, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8,
    0x51c8, 0xf9c3, 0xf9c3, 0xf9c3, 0xf9c3, 0x51c8, 0xd739, 0xffdf, 0xffdf,
    0xffdf, 0xffdf, 0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x51c8, 0xffdf, 0xffdf, 0xffdf, 0xffdf, 0xffdf, 0xffdf, 0x51c8,
    0xf9c3, 0xf9c3, 0xf9c3, 0xf9c3, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8,
    0x51c8, 0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x51c8,
    0xfeb2, 0xffdf, 0xffdf, 0xffdf, 0xffdf, 0xfeb2, 0x51c8, 0xf9c3, 0xf9c3,
    0xf9c3, 0x51c8, 0xf5a8, 0xf5a8, 0xf5a8, 0xf5a8, 0xf5a8, 0xf5a8, 0xf5a8,
    0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0x51c8,
    0x51c8, 0x51c8, 0x51c8, 0x51c8, 0xd182, 0xd182, 0x51c8, 0x51c8, 0xf5a8,
    0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0x51c8, 0x51c8, 0x51c8,
    0x51c8, 0x51c8, 0xd182, 0xd182, 0x51c8, 0x51c8, 0xf5a8, 0x51c8, 0x51c8,
    0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0xd182, 0xd182, 0xd182, 0xd182,
    0xd182, 0xd182, 0xd182, 0xd182, 0x51c8, 0xf5a8, 0xf5a8, 0xf5a8, 0xf5a8,
    0xf5a8, 0xf5a8, 0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x51c8, 0x51c8, 0x51c8, 0xd182, 0xd182, 0xd182,
    0xd182, 0xd182, 0xd182, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8,
    0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};

// array size is 950
const uint16_t flappy3[] = {
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8,
    0x51c8, 0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x51c8, 0x51c8, 0xfb84, 0xfb84, 0xfb84, 0xfb84, 0x51c8, 0xffdf, 0xffdf,
    0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0x51c8, 0xfb84, 0xfb84,
    0xf9c3, 0xf9c3, 0x51c8, 0x51c8, 0xffdf, 0xffdf, 0xffdf, 0xffdf, 0x51c8,
    0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x51c8, 0xfb84, 0xfb84, 0xf9c3, 0xf9c3, 0xf9c3, 0xf9c3,
    0x51c8, 0x51c8, 0xd739, 0xffdf, 0xffdf, 0x51c8, 0xffdf, 0xffdf, 0x51c8,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x51c8, 0xfb84, 0xfb84, 0xf9c3, 0xf9c3, 0xf9c3, 0xf9c3, 0x51c8, 0x51c8,
    0xd739, 0xffdf, 0xffdf, 0x51c8, 0xffdf, 0xffdf, 0x51c8, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0xf9c3, 0xf9c3,
    0xf9c3, 0xf9c3, 0xf9c3, 0xf9c3, 0xf9c3, 0x51c8, 0x51c8, 0xd739, 0xffdf,
    0xffdf, 0x51c8, 0xffdf, 0xffdf, 0x51c8, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0xf9c3, 0xf9c3, 0xf9c3, 0xf9c3,
    0xf9c3, 0xf9c3, 0xf9c3, 0xf9c3, 0xf9c3, 0x51c8, 0xd739, 0xffdf, 0xffdf,
    0xffdf, 0xffdf, 0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0xf9c3,
    0xf9c3, 0xf9c3, 0xf9c3, 0xf9c3, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8,
    0x51c8, 0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x51c8,
    0xfeb2, 0xffdf, 0xffdf, 0xffdf, 0xffdf, 0xfeb2, 0x51c8, 0xf9c3, 0xf9c3,
    0xf9c3, 0x51c8, 0xf5a8, 0xf5a8, 0xf5a8, 0xf5a8, 0xf5a8, 0xf5a8, 0xf5a8,
    0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0xffdf, 0xffdf,
    0xffdf, 0xffdf, 0xffdf, 0x51c8, 0xd182, 0xd182, 0x51c8, 0x51c8, 0xf5a8,
    0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0xffdf, 0xffdf, 0xffdf, 0xffdf,
    0xffdf, 0x51c8, 0xd182, 0xd182, 0x51c8, 0x51c8, 0xf5a8, 0x51c8, 0x51c8,
    0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x51c8, 0xffdf, 0xffdf, 0xfeb2, 0xfeb2, 0x51c8, 0xd182,
    0xd182, 0xd182, 0xd182, 0xd182, 0x51c8, 0xf5a8, 0xf5a8, 0xf5a8, 0xf5a8,
    0xf5a8, 0xf5a8, 0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0xd182, 0xd182, 0xd182,
    0xd182, 0xd182, 0xd182, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x51c8, 0x51c8, 0x51c8, 0x51c8, 0x51c8,
    0x51c8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};

// lcd configuration
const struct st7789_config lcd_config = {
    .spi = PICO_DEFAULT_SPI_INSTANCE,
    .gpio_din = 3,
    .gpio_clk = 2,
    .gpio_cs = 5,
    .gpio_dc = 1,
    .gpio_rst = 0,
    .gpio_bl = 4,
};

int main() {
  stdio_init_all();

  // initialize the lcd
  st7789_init(&lcd_config, LCD_WIDTH, LCD_HEIGHT);

  // We are using the button to pull down to 0v when pressed, so ensure that
  // when unpressed, it uses internal pull ups. Otherwise when unpressed, the
  // input will be floating.
  gpio_init(LEFT_BUTTON);
  gpio_set_dir(LEFT_BUTTON, GPIO_IN);
  gpio_pull_up(LEFT_BUTTON);
  gpio_init(RIGHT_BUTTON);
  gpio_set_dir(RIGHT_BUTTON, GPIO_IN);
  gpio_pull_up(RIGHT_BUTTON);

  const uint16_t GRAVITY = 1500;
  float jumpSpeed = 350;
  float sprite_x, sprite_y, sprite_width, sprite_height, velocity_y;

  sprite_x = LCD_WIDTH / 3;
  sprite_y = LCD_HEIGHT / 2;
  velocity_y = 0;

  sprite_width = FLAPPY_WIDTH;
  sprite_height = FLAPPY_HEIGHT;

  static int framesCounter, sprite_index;

  uint16_t *flappy_sprites[NUM_SPRITES];
  flappy_sprites[0] = (uint16_t *)flappy1;
  flappy_sprites[1] = (uint16_t *)flappy2;
  flappy_sprites[2] = (uint16_t *)flappy3;

  uint16_t *fsm_ptr = flappy_sprites[0];

  static float deltaTime = 0.016;
  while (1) {
    framesCounter++;
    if (framesCounter >= (60 / 6)) {
      framesCounter = 0;
      sprite_index++;
      if (sprite_index > 2)
        sprite_index = 0;

      fsm_ptr = flappy_sprites[sprite_index];
    }

    if (!gpio_get(LEFT_BUTTON)) {
      // make screen WHITE
      // for (int y = 0; y < LCD_HEIGHT; y++) {
      //   for (int x = 0; x < LCD_WIDTH; x++) {
      //     st7789_draw_pixel(x, y, BLACK);
      //   }
      // }
    } else if (!gpio_get(RIGHT_BUTTON)) {
      velocity_y = -jumpSpeed;
      // Define the position and size of the sprite
    }

    velocity_y += GRAVITY * deltaTime;
    sprite_y += velocity_y * deltaTime;

    st7789_update_display(sprite_x, sprite_y, fsm_ptr, sprite_width,
                          sprite_height);

    sleep_ms(deltaTime * 1000);
  }
}
